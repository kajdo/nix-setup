#!/usr/bin/env bash

# Configuration and Paths
# ========================
# IMPORTANT: Replace these with your actual details!
# Your GitHub Username where the forked opencode is located
GITHUB_USERNAME="kajdo" # <-- REPLACE THIS!
# The branch/tag/commit hash where you committed package-lock.json
FORK_COMMIT_HASH="sha256-vTGEdOUI2KWwQlqR6Xx28b+m75SiTJITUD5D06ooLq8=" # <-- REPLACE THIS!

# Path to the directory where this script resides.
# Assuming it's /etc/nixos/nixos/flakes/opencode-ai/
FLAKE_DIR="$(dirname "$(readlink -f "$0")")"
NIXOS_CONFIG_ROOT="/etc/nixos" # Your main NixOS flake root

OPCODE_AI_NIX_FILE="${FLAKE_DIR}/default.nix"

echo "--- NixOS Opencode-AI Flake Installation Script ---"
echo "This script helps set up the custom opencode-ai flake."
echo "It handles: cloning source, generating package-lock.json, pushing to your fork, and guiding you through Nix hashing."
echo ""

# --- Step 0: Initial Setup and Dependencies ---
echo "--- Step 0: Checking for local build dependencies (Bun, Node.js) ---"
if ! command -v git &> /dev/null; then
    echo "Error: 'git' is not installed. Please install git and try again."
    exit 1
fi

# Ensure Bun and Node.js are available in the current environment
# This is a temporary shell for setup, not the Nix build sandbox
echo "Entering a temporary shell to ensure Bun and Node.js are available."
nix-shell -p git bun nodejs --run "
  echo 'You are now in a temporary development shell.'
  echo 'Please check if bun, node, npm are available:'
  bun --version || echo 'Bun not found.'
  node --version || echo 'Node.js not found.'
  npm --version || echo 'NPM not found.'
  echo 'Exiting temporary shell...'
"
if [ $? -ne 0 ]; then
    echo "Error: Could not enter temporary nix-shell or essential tools not found. Aborting."
    echo "You might need to install 'git', 'bun', 'nodejs' on your system or ensure nix-shell works."
    exit 1
fi
echo "Local build dependencies seem to be present."
echo ""

# --- Step 1: Prepare the Upstream Source with package-lock.json ---
echo "--- Step 1: Preparing/Updating your forked opencode repository ---"
LOCAL_CLONE_DIR="/tmp/opencode-fork-setup" # Temporary directory for cloning
if [ -d "${LOCAL_CLONE_DIR}" ]; then
    echo "Removing previous temporary clone at ${LOCAL_CLONE_DIR}..."
    rm -rf "${LOCAL_CLONE_DIR}"
fi
echo "Cloning https://github.com/${GITHUB_USERNAME}/opencode.git into ${LOCAL_CLONE_DIR}..."
if ! git clone "https://github.com/${GITHUB_USERNAME}/opencode.git" "${LOCAL_CLONE_DIR}"; then
    echo "Error: Failed to clone your forked repository. Please check GITHUB_USERNAME and network access."
    exit 1
fi
cd "${LOCAL_CLONE_DIR}" || { echo "Error: Could not change to cloned directory."; exit 1; }

echo "Checking out the specified commit hash: ${FORK_COMMIT_HASH}"
if ! git checkout "${FORK_COMMIT_HASH}"; then
    echo "Error: Failed to checkout commit hash. Please ensure FORK_COMMIT_HASH is correct."
    exit 1
fi

echo "Generating package-lock.json if not present..."
# Clean up existing node_modules from previous runs if any
rm -rf node_modules

# Try bun first
if test -f bun.lockb; then
    echo "bun.lockb found. Attempting to generate package-lock.json using bun..."
    # Ensure network access is available for bun install if needed
    bun install || echo "Bun install failed, but continuing to try package-lock generation."
    bun pm export --output package-lock.json || echo "bun pm export failed. Trying npm..."
fi

# Fallback to npm if package-lock.json not generated by bun
if [ ! -f package-lock.json ]; then
    echo "package-lock.json not found or bun export failed. Attempting to generate with npm..."
    npm install --package-lock-only || { echo "Error: Failed to generate package-lock.json with npm. Aborting."; exit 1; }
fi

if [ ! -f package-lock.json ]; then
    echo "Critical Error: package-lock.json could not be generated. Aborting."
    exit 1
fi
echo "package-lock.json generated/confirmed in ${LOCAL_CLONE_DIR}"
echo ""

# --- Step 2: Guide User to Update flake.nix ---
echo "--- Step 2: Update flake.nix in your main NixOS config to point to YOUR fork and commit ---"
echo "Open ${OPCODE_AI_NIX_FILE} and ensure the 'src' block looks like this:"
echo "src = pkgs.fetchFromGitHub {"
echo "  owner = \"${GITHUB_USERNAME}\";"
echo "  repo = \"opencode\";"
echo "  rev = \"${FORK_COMMIT_HASH}\";"
echo "  sha256 = \"sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\"; # <--- DUMMY HASH FOR YOUR FORK'S SOURCE"
echo "};"
echo "And ensure the 'npmDepsLockFileHash' is also a dummy hash:"
echo "npmDepsLockFileHash = \"sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\";"
echo ""
read -p "Press Enter once you have updated ${OPCODE_AI_NIX_FILE} to continue (Nix build will get the real hashes)..."

# --- Step 3: Nix Build and Hash Generation ---
echo "--- Step 3: Running Nix build to get the correct SHA256 hashes ---"
cd "${NIXOS_CONFIG_ROOT}" || { echo "Error: Could not change to NixOS config root."; exit 1; }

for i in {1..2}; do
    echo "Attempt $i/2 to build `opencode-ai` and get hashes..."
    BUILD_OUTPUT=$(sudo nix build .#opencode-ai 2>&1)
    BUILD_STATUS=$?

    if [ $BUILD_STATUS -eq 0 ]; then
        echo "Build successful! All hashes should be correct."
        break # Exit loop if build passes
    else
        echo "Build failed. Getting hash from error message..."
        # Extract the hash. It could be for src or npmDeps.
        CORRECT_HASH=$(echo "${BUILD_OUTPUT}" | grep -oP 'got:\s*\Ksha256-\S+')
        if [ -n "${CORRECT_HASH}" ]; then
            echo "Found correct SHA256: ${CORRECT_HASH}"
            if echo "${BUILD_OUTPUT}" | grep -q "hash mismatch in fixed-output derivation '.*-source.drv'"; then
                # This is likely the src hash
                echo "This is likely the hash for 'src'. Please update ${OPCODE_AI_NIX_FILE} 'src.sha256' with this value."
            else
                # This is likely the npmDepsLockFileHash
                echo "This is likely the hash for 'npmDepsLockFileHash'. Please update ${OPCODE_AI_NIX_FILE} 'npmDepsLockFileHash' with this value."
            fi
            echo ""
            read -p "Press Enter after you have copied and pasted the hash into ${OPCODE_AI_NIX_FILE}..."
        else
            echo "Could not find a relevant hash in the error output."
            echo "Full error output:"
            echo "${BUILD_OUTPUT}"
            echo "Please inspect the error and fix it manually."
            exit 1
        fi
    fi
done

if [ $BUILD_STATUS -eq 0 ]; then
    echo "--- Flake Installation Complete! ---"
    echo "You can now install 'opencode-ai' to your user profile:"
    echo "  nix profile install .#opencode-ai"
    echo "Or add it to your configuration.nix's systemPackages."
else
    echo "--- Flake Installation Failed After Max Attempts ---"
    echo "Please review the last error message and logs from the previous build attempt."
    echo "You can manually inspect
